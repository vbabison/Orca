DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS tracks CASCADE;
DROP TABLE IF EXISTS sessions CASCADE;
DROP TABLE IF EXISTS drum_sequence CASCADE;
DROP TABLE IF EXISTS bass_sequence CASCADE;
DROP TABLE IF EXISTS synth_sequence CASCADE;
DROP TABLE IF EXISTS favourites CASCADE;

CREATE TABLE users (
  id SERIAL PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL
);

CREATE TABLE tracks (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  category VARCHAR(255) NOT NULL,
  tags TEXT,
  description TEXT,
  published BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE sessions (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  track_id INTEGER REFERENCES tracks(id) ON DELETE CASCADE
);

CREATE TABLE drum_sequence (
  id SERIAL PRIMARY KEY NOT NULL,
  session_id INTEGER REFERENCES sessions(id) ON DELETE CASCADE,
  drums_kick INTEGER ARRAY,
  drums_snare INTEGER ARRAY,
  drums_ho INTEGER ARRAY,
  drums_hc INTEGER ARRAY
);

CREATE TABLE bass_sequence (
  id SERIAL PRIMARY KEY NOT NULL,
  session_id INTEGER REFERENCES sessions(id) ON DELETE CASCADE,
  bass_c2 INTEGER ARRAY,
  bass_b1 INTEGER ARRAY,
  bass_a1 INTEGER ARRAY,
  bass_g1 INTEGER ARRAY,
  bass_f1 INTEGER ARRAY,
  bass_e1 INTEGER ARRAY,
  bass_d1 INTEGER ARRAY,
  bass_c1 INTEGER ARRAY
);

CREATE TABLE synth_sequence (
  id SERIAL PRIMARY KEY NOT NULL,
  session_id INTEGER REFERENCES sessions(id) ON DELETE CASCADE,
  synth_c4 INTEGER ARRAY,
  synth_b3 INTEGER ARRAY,
  synth_a3 INTEGER ARRAY,
  synth_g3 INTEGER ARRAY,
  synth_f3 INTEGER ARRAY,
  synth_e3 INTEGER ARRAY,
  synth_d3 INTEGER ARRAY,
  synth_c3 INTEGER ARRAY
);

CREATE TABLE favourites (
  id SERIAL PRIMARY KEY NOT NULL,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  track_id INTEGER REFERENCES tracks(id) ON DELETE CASCADE
);

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO labber;
